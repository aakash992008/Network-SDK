plugins {
    id 'com.android.library'
    id 'org.jetbrains.kotlin.android'
    id 'maven-publish'
    id 'kotlin-kapt'
}

def getVersionName = { ->
    def versionName = System.getenv("Version") ?: "1.0.10"
    println "Version Name  ->>>  $versionName"
    return versionName// Replace with version Name
}

def githubProperties = new Properties()
if (rootProject.file("github.properties").exists()) {
    githubProperties.load(new FileInputStream(rootProject.file("github.properties")))
} else {
    println "Github properties file not exists"
}

publishing {
    publications {
        debug(MavenPublication) {
            groupId 'com.aakash.solutions.networking'
            artifactId 'android_network_sdk'
            version getVersionName()
            artifact("$buildDir/outputs/aar/android_network_sdk-debug.aar")

            pom.withXml {
                final dependenciesNode = asNode().appendNode('dependencies')
                ext.addDependency = { Dependency dep, String scope ->
                    if (dep.group == null || dep.version == null || dep.name == null || dep.name == "unspecified")
                        return
                    final dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', dep.group)
                    dependencyNode.appendNode('artifactId', dep.name)
                    dependencyNode.appendNode('version', dep.version)
                    dependencyNode.appendNode('scope', scope)
                    if (!dep.transitive) {
                        final exclusionNode = dependencyNode.appendNode('exclusions').appendNode('exclusion')
                        exclusionNode.appendNode('groupId', '*')
                        exclusionNode.appendNode('artifactId', '*')
                    }else if (!dep.properties.excludeRules.empty) {
                        // Otherwise add specified exclude rules
                        final exclusionsNode = dependencyNode.appendNode('exclusions')
                        dep.properties.excludeRules.each { ExcludeRule rule ->
                            def exclusion = exclusionsNode.appendNode('exclusion')
                            exclusion.appendNode('groupId', rule.group ?: '*')
                            exclusion.appendNode('artifactId', rule.module ?: '*')
                        }
                    }
                }
                configurations.api.getDependencies().each { dep -> addDependency(dep, "compile") }
                configurations.implementation.getDependencies().each { dep -> addDependency(dep, "runtime") }
            }
        }
        release(MavenPublication) {
            groupId 'com.aakash.solutions.networking'
            artifactId 'android_network_sdk_no_log'
            version getVersionName()
            artifact("$buildDir/outputs/aar/android_network_sdk-release.aar")

            pom.withXml {
                final dependenciesNode = asNode().appendNode('dependencies')
                ext.addDependency = { Dependency dep, String scope ->
                    if (dep.group == null || dep.version == null || dep.name == null || dep.name == "unspecified")
                        return
                    final dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', dep.group)
                    dependencyNode.appendNode('artifactId', dep.name)
                    dependencyNode.appendNode('version', dep.version)
                    dependencyNode.appendNode('scope', scope)
                    if (!dep.transitive) {
                        final exclusionNode = dependencyNode.appendNode('exclusions').appendNode('exclusion')
                        exclusionNode.appendNode('groupId', '*')
                        exclusionNode.appendNode('artifactId', '*')
                    } else if (!dep.properties.excludeRules.empty) {
                        // Otherwise add specified exclude rules
                        final exclusionsNode = dependencyNode.appendNode('exclusions')
                        dep.properties.excludeRules.each { ExcludeRule rule ->
                            def exclusion = exclusionsNode.appendNode('exclusion')
                            exclusion.appendNode('groupId', rule.group ?: '*')
                            exclusion.appendNode('artifactId', rule.module ?: '*')
                        }
                    }
                }
                configurations.api.getDependencies().each { dep -> addDependency(dep, "compile") }
                configurations.implementation.getDependencies().each { dep -> addDependency(dep, "runtime") }
            }
        }
    }
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/nykaafashion/android_network_sdk")
            credentials {
                username = "aakash-992008"
                password = githubProperties["gpr.key"]
            }
        }
    }
}


android {
    compileSdkVersion 31
    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 31
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
    }

    buildTypes {
        release {
            debuggable false
            buildConfigField "boolean", "DEBUGGABLE", "false"
        }
        debug {
            debuggable true
            buildConfigField "boolean", "DEBUGGABLE", "true"
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

dependencies {


    def retrofit_version = "2.9.0"
    def logging_interceptor_version = "4.9.0"
    def rx_android_version = "2.1.1"
    def chucker = "3.5.2"


    //Retrofit - Networking library
    implementation "com.squareup.retrofit2:retrofit:$retrofit_version"
    implementation "com.squareup.retrofit2:converter-gson:$retrofit_version"
    implementation "com.squareup.retrofit2:adapter-rxjava2:$retrofit_version"
    implementation "com.squareup.okhttp3:logging-interceptor:$logging_interceptor_version"
    implementation "io.reactivex.rxjava2:rxandroid:$rx_android_version"
    implementation("com.squareup.retrofit2:converter-moshi:$retrofit_version")
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.2.1'


    //Chucker
    debugImplementation "com.github.chuckerteam.chucker:library:$chucker"
    releaseImplementation "com.github.chuckerteam.chucker:library-no-op:$chucker"


    implementation "androidx.core:core-ktx:1.3.2"

    implementation("com.squareup.moshi:moshi:1.9.2")
    kapt("com.squareup.moshi:moshi-kotlin-codegen:1.9.2")

    implementation "androidx.lifecycle:lifecycle-livedata-ktx:2.4.1"
    implementation("com.squareup.okhttp3:okhttp:4.9.0")
}